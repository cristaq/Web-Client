Cristache Cristian-Valentin

For the creation of JSON we used the cJSON library.

Important to mention is how we write a JSON. The first time I create a
cJSON object with the cJSON_CreateObject() function. To create a JSON entry,
we use the function cJSON_AddItemToObject(object, "string", cJSON*), where
the last argument is given by cJSON_CreateString() (we only work with strings).
At the end the initial object must be deleted with cJSON_Delete(object).


request.c
Here is the formatting for each request: GET, POST and DELETE.
For each there is a function. Their implementations are almost
those in lab 10, except for adding the Authorization field where
field we put the JWT token (if it is not NULL of course). Only the DELETE function is new,
but it behaves exactly the same as the rest.

helpers.c
File taken from lab 10 where functions like:
compute_message (add \r\n to messages), send_to_server,
recieve_from_server etc.

client.c
Here is the main program which is basically a while(1)
with a big if-else. Each if deals with a command that can be
entered from the keyboard. Regardless of the command, the steps are similar:

1. Open the connection to the server.
2. Take the command from the keyboard.
3. Request additional information, if necessary. For example at login you must 
a username and password must be entered, and the book ID must be entered at get_book.
4. Generate JSON with the post data if the request is POST.
For example in add_book, all book data (title, author...) must be
added in a JSON.
5. Generate the message using the functions in the request 
functions (compute_X_request, where X is post, get or delete) and send it with
send_to_server function.
6. Receive the response from the server with receive_from_server.
7. Check the code in the response. If it starts with 2 it means that the operation has
was successful and displays a suggestive message. Otherwise, display the error
returned by the server.
8. Close the connection.
